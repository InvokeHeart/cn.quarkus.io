<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="3.6.2" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText"/>
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus 2.0 continues the mission of making Java the preferred framework for Kubernetes-native development with new developer tools and improved performance.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus 2.0继续致力于通过新的开发工具和改进的性能，使Java成为kubernetes本地开发的首选框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating Your First Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建你的第一个应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to create a Hello World Quarkus app.  This guide covers:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>学习如何创建一个Hello World Quarkus应用程序。本指南包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping an application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a JAX-RS endpoint</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个JAX-RS端点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting beans</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>注入beans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Functional tests</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>功能测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging of the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用程序打包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Prerequisites</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>先决条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Verify Maven is using the Java you expect</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>验证Maven是否使用了你期望的Java版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have multiple JDK's installed it is not certain Maven will pick up the expected java and you could end up with unexpected results.  You can verify which JDK Maven uses by running `mvn --version`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你安装了多个JDK，那么Maven不一定能找到预期的java，你可能会得到意想不到的结果。你可以通过运行 `mvn --version` ，验证Maven使用哪个JDK。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Architecture</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用结构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection, this endpoint uses a `greeting` bean.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在本指南中，我们创建了一个简单的应用程序，为 `hello` 端点提供服务。为了演示依赖性注入，这个端点使用了一个 `greeting` bean。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Architecture,</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用结构，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide also covers the testing of the endpoint.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本指南还包括对终端的测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Solution</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>解决方案</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions from &lt;&lt;bootstrapping-the-project,Bootstrapping project&gt;&gt; and onwards to create the application step by step.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们建议你按照从 link:#bootstrapping-the-project[构建项目] 开始的指示，一步一步地创建应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>然而，你可以直接进入完成的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Download an {quickstarts-archive-url}[archive] or clone the git repository:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>下载一个 {quickstarts-archive-url}[存档] 或克隆git仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `getting-started` {quickstarts-tree-url}/getting-started[directory].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>该解决方案位于 `getting-started` {quickstarts-tree-url}/getting-started[目录] 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping the project</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The easiest way to create a new Quarkus project is to open a terminal and run the following command:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个新的Quarkus项目最简单的方法是打开终端并运行以下命令：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Linux &amp; MacOS users</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>针对Linux和MacOS用户</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Windows users</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于Windows用户</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using cmd , (don't use backward slash `\` and put everything on the same line)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果使用cmd ，（不要使用反斜线 `\` ，并将所有内容放在同一行）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using Powershell , wrap `-D` parameters in double quotes e.g. `"-DprojectArtifactId=getting-started"`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果使用Powershell，用双引号包住 `-D` 参数，例如： `"-DprojectArtifactId=getting-started"` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It generates the following in `./getting-started`:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>它在 `./getting-started` 中产生了以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Maven structure</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Maven的结构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 两种模式，在 `src/main/docker` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once generated, look at the `pom.xml`.  You will find the import of the Quarkus BOM, allowing you to omit the version of the different Quarkus dependencies.  In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一旦生成，请看 `pom.xml` 。你会发现Quarkus BOM的导入，允许你省略不同Quarkus依赖的版本。此外，你可以看到 `quarkus-maven-plugin` ，负责应用程序的打包，也提供开发模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In a Gradle project, you would find a similar setup:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在Gradle项目中，你会发现一个类似的设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Quarkus Gradle plugin</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus Gradle插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>an `enforcedPlatform` directive for the Quarkus BOM</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`enforcedPlatform` ，用于指示Quarkus BOM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If we focus on the dependencies section, you can see the extension allowing the development of REST applications:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果我们把重点放在依赖关系部分，你可以看到允许开发REST应用程序的扩展：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pom.xml</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>pom.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>build.gradle</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>During the project creation, the `src/main/java/org/acme/GreetingResource.java` file has been created with the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在项目创建过程中， `src/main/java/org/acme/GreetingResource.java` 文件已被创建，其内容如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's a very simple REST endpoint, returning "Hello from RESTEasy Reactive" to requests on "/hello".</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这是一个非常简单的REST端点，对"/hello "上的请求返回 "Hello from RESTEasy Reactive"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Differences with vanilla JAX-RS</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与vanilla JAX-RS的区别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用Quarkus，不需要创建一个 `Application` 类。它支持这么做，但不是必须的。此外，只有一个资源的实例被创建，而不是每个请求一个。你可以使用不同的 `*Scoped` 注解（ `ApplicationScoped` , `RequestScoped` , 等等）来配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now we are ready to run our application:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现在我们已经准备好运行我们的应用程序：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once started, you can request the provided endpoint:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一旦启动，你可以发送请求到提供服务的端点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>点击 `CTRL+C` ，停止应用程序，或保持运行，享受极快的热重载。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatically add newline with `curl -w "\n"`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>自动添加换行符 `curl -w "\n"` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We are using `curl -w "\n"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们在这个例子中使用 `curl -w "\n"` ，以避免你的终端打印出'%'或把结果和下一个命令提示符放在同一行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using injection</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用注入法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] guide.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus中的依赖注入是基于ArC的，ArC是一个基于CDI的依赖注入解决方案，。如果你是CDI的新手，那么我们推荐你阅读 link:cdi.html[CDI简介] 指南。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus只实现了CDI功能的一个子集，并且带有非标准的功能和特定的APIS，你可以在 link:cdi-reference.html[Contexts和依赖注入指南] 中了解更多。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>ArC作为 `quarkus-resteasy-reactive` 的一个依赖项，所以你已经有了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's modify the application and add a companion bean.  Create the `src/main/java/org/acme/GreetingService.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>让我们修改应用程序并添加一个bean。创建 `src/main/java/org/acme/GreetingService.java` 文件，内容如下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>编辑 `GreetingResource` 类，注入 `GreetingService` ，并使用它创建一个新的端点:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you stopped the application (keep in mind you don't have to do it, changes will be automatically deployed by our live reload feature), restart the application with:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你停止了应用程序（请记住，你不必这样做，变化将由我们的实时重载功能自动部署），用以下方法重新启动应用程序:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then check that the endpoint returns `hello quarkus` as expected:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>然后检查端点是否按预期返回 `hello quarkus` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Development Mode</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发模式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.  This works too for resource files like the configuration property file.  Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`quarkus:dev` 在开发模式下运行Quarkus。这使得后台编译的实时重载成为可能，这意味着当你修改你的Java文件或者资源文件并刷新你的浏览器时，这些变化将自动生效。这也适用于资源文件，如配置属性文件。刷新浏览器会触发对工作区的扫描，如果检测到任何变化，Java文件会被重新编译，应用程序会被重新部署；然后你的请求会被重新部署的应用程序提供服务。如果编译或部署有任何问题，错误页面会让你知道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这也将在端口 `5005` 上监听调试器。如果你想在运行前等待调试器的连接，你可以在命令行中传递 `-Dsuspend` 。如果你根本不想要调试器，你可以使用 `-Ddebug=false` 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All right, so far so good, but wouldn't it be better with a few tests, just in case.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>好吧，到目前为止还不错。为了以防万一， 我们需要再做一些测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the generated build file, you can see 2 test dependencies:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在生成的构建文件中，你可以看到2个测试依赖项：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus supports https://junit.org/junit5/[JUnit 5] tests.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus支持 link:https://junit.org/junit5/[JUnit 5] 测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because of this, in the case of Maven, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support JUnit 5:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>正因为如此，就Maven而言，必须设置 link:https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] 的版本，因为默认版本不支持JUnit 5：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We also set the `java.util.logging` system property to make sure tests will use the correct log manager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们还设置了 `java.util.logging` 系统属性，以确保测试将使用正确的日志管理器和 `maven.home` ，以确保应用 `${maven.home}/conf/settings.xml` 的自定义配置（如果有的话）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The generated project contains a simple test.  Edit the `src/test/java/org/acme/GreetingResourceTest.java` to match the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>生成的项目包含一个简单的测试。编辑 `src/test/java/org/acme/GreetingResourceTest.java` ，以匹配以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过使用 `QuarkusTest` runner，你指示JUnit在测试前启动应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check the HTTP response status code and content</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>检查HTTP回应状态代码和内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These tests use http://rest-assured.io/[RestAssured], but feel free to use your favorite library.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这些测试使用 link:http://rest-assured.io/[RestAssured] ，但也可以随意使用你最喜欢的库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run these using Maven:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以用Maven来运行这些：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also run the test from your IDE directly (be sure you stopped the application first).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你也可以直接从你的IDE中运行测试（要确保你先停止了应用程序）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, tests will run on port `8081` so as not to conflict with the running application. We automatically configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource` annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type `String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test a Servlet mapped to `/myservlet` I would just add the following to my test:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>默认情况下，测试将在端口 `8081` 上运行，以便不与正在运行的应用程序冲突。我们自动将RestAssured配置为使用该端口。如果你想使用不同的客户端，你应该使用 `@TestHTTPResource` 注释，直接将测试应用程序的URL注入到测试类的一个字段中。这个字段的类型可以是 `String` , `URL` 或 `URI` 。这个注解也可以给测试路径一个值。例如，如果我想测试一个映射到 `/myservlet` 的Servlet，只需在测试中添加以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system property called `test.url` that is set to the base test URL for situations where you cannot use injection.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>测试端口可以通过 `quarkus.http.test-port` 配置属性来控制。Quarkus还创建了一个名为 `test.url` 的系统属性，在不能使用注入的情况下被设置为基本测试URL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Working with multi-module project or external modules</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与多模块项目或外部模块一起工作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.  As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus在构建时大量使用 link:https://github.com/wildfly/jandex[Jandex] ，以发现各种类或注解。其中一个应用就是可以发现并识别CDI Bean。因此，如果没有在构建时正确设置，大多数Quarkus扩展将无法正常工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过使用Maven和Gradle插件，这个索引在Quarkus的项目上的默认配置是自动创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the xref:maven-tooling.adoc#multi-module-maven[Maven] or xref:gradle-tooling.adoc#multi-module-maven[Gradle] guides.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>不过，在处理多模块项目时，请务必阅读 link:maven-tooling.html#multi-module-maven[Maven] 或 link:gradle-tooling.html#multi-module-maven[Gradle] 指南中的 `多模块项目` 部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you plan to use external modules (for example, an external library for all your domain objects), you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)  or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你计划使用外部模块（例如，一个用于你所有领域对象的外部库），你将需要通过添加Jandex插件（如果你能修改它们）或通过 `application.properties` 里的属性`quarkus.index-dependency` （在你不能修改模块的情况下很有用）使这些模块为索引过程所知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be sure to read the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide for more information.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请务必阅读CDI指南中的 link:cdi-reference.html#bean_discovery[Bean发现] 部分以了解更多信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and run the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用程序打包和运行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The application is packaged using:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>该应用程序是用以下方式打包的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It produces several outputs in `/target`:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>它在 `/target` ，产生几个输出：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular artifact produced by the Maven build - it is *not* the runnable jar;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - 它只包含项目的类和资源，是Maven构建时产生的常规组件——它是不可运行的jar。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `quarkus-app` directory which contains the `quarkus-run.jar` jar file - being an executable _jar_. Be aware that it's not an _über-jar_ as the dependencies are copied into subdirectories of `quarkus-app/lib/`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`quarkus-app` 目录，其中包含 `quarkus-run.jar` jar文件--是一个可执行的 _jar_ 。请注意，它不是 _über-jar_ ，因为依赖项目被复制到 `quarkus-app/lib/` 的子目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以用以下方式运行该应用程序。 `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to deploy your application somewhere (typically in a container), you need to deploy the whole `quarkus-app` directory.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你想把你的应用程序部署到某个地方（通常是在一个容器中），你需要部署整个 `quarkus-app` 目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在运行应用程序之前，不要忘记停止热重载模式（使用 `CTRL+C` ），否则你会有一个端口冲突。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the banner</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>配置banner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`, by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.  Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>默认情况下，当Quarkus应用程序启动时（在常规或开发模式下），它将显示一个ASCII。通过在 `application.properties` 中设置 `quarkus.banner.enabled=false` ，通过设置 `-Dquarkus.banner.enabled=false` Java系统属性，或者通过将 `QUARKUS_BANNER_ENABLED` 环境变量设置为 `false` ，可以禁用该横幅。此外，用户可以通过将横幅文件放在 `src/main/resources` ，并在 `application.properties` 中配置 `quarkus.banner.path=name-of-file` ，从而提供一个自定义的横幅。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What's next?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>下一步做什么？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covered the creation of an application using Quarkus.  However, there is much more.  We recommend continuing the journey with the xref:building-native-image.adoc[building a native executable guide], where you learn about creating a native executable and packaging it in a container.  If you are interested in reactive, we recommend the xref:getting-started-reactive.adoc[Getting Started with Reactive guide], where you can see how to implement reactive applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本指南涵盖了使用 Quarkus 创建应用程序的内容。 然而，下面还有更多内容。 我们建议您继续学习 xref:building-native-image.adoc[构建本地可执行文件指南]，您可以在其中了解如何创建本地可执行文件并将其打包到容器中。 如果您对响应式感兴趣，我们推荐 xref:getting-started-reactive.adoc[响应式入门指南]，您可以在其中了解如何使用 Quarkus 实现响应式应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In addition, the xref:tooling.adoc[tooling guide] document explains how to:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>此外，xref:tooling.adoc[工具指南] 文档解释了如何做到：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import the project in your favorite IDE</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在你喜欢的编辑器里面导入项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Container First</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>容器优先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>指令式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developer Joy</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发者的乐趣</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus为GraalVM和HotSpot定制你的应用程序。令人惊讶的快速启动时间，令人难以置信的低RSS内存（不仅仅是堆的大小！），在Kubernetes等容器协调平台中提供近乎即时的扩展和高密度的内存利用。我们使用一种我们称之为编译时启动的技术。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Unifies imperative and reactive&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/continuum"&gt;统一指令式和响应式&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在开发应用程序时，将熟悉的指令式和响应式代码风格结合起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of over fifty best-of-breed libraries that you love and use. All wired on a standard backbone.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus提供了一个有凝聚力的、有趣的、全栈式的框架，它利用了各类不断增长的50多个你喜欢和使用的最好的库。所有这些都在一个标准的主干上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The combination of Quarkus and Kubernetes provides an ideal environment for creating scalable, fast, and lightweight applications. Quarkus significantly increases developer productivity with tooling, pre-built integrations, application services, and more.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus和Kubernetes的组合为创建可伸缩、快速和轻量级的应用程序提供了理想的环境。Quarkus通过工具、预构建集成、应用程序服务等显著提高了开发人员的生产率。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy with unified configuration and no hassle native executable generation. Zero config, live reload in the blink of an eye and streamlined code for the 80% common usages, flexible for the remainder 20%.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个内聚的平台，优化开发人员的乐趣，统一的配置和没有麻烦的本地可执行文件生成。零配置，瞬间重新加载，简化80%的常用代码，灵活处理剩余的20%。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>QUARKUS 2.0 IS HERE!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>QUARKUS 2.0来了！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java" target="_blank"&gt;an IDE&lt;/a&gt; like &lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href="https://www.eclipse.org/downloads/"&gt;Eclipse&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt; or even &lt;a href="https://spacevim.org/use-vim-as-a-java-ide/"&gt;Vim&lt;/a&gt; or &lt;a href="http://spacemacs.org"&gt;Emacs&lt;/a&gt;!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java" target="_blank"&gt;一个IDE&lt;/a&gt;，比如&lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA&lt;/a&gt;，&lt;a href="https://www.eclipse.org/downloads/"&gt;Eclipse&lt;/a&gt;、&lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt;或者至少有一个&lt;a href="https://spacevim.org/use-vim-as-a-java-ide/"&gt;Vim&lt;/a&gt;、&lt;a href="http://spacemacs.org"&gt;Emacs&lt;/a&gt;文本编辑器！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need a &lt;a href="https://adoptopenjdk.net" target="_blank"&gt;a JDK {{ site.data.versions.jdk }}&lt;/a&gt; (any distribution)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要一个&lt;a href="https://adoptopenjdk.net" target="_blank"&gt;JDK {{ site.data.version.jdk }}&lt;/a&gt;（任意发行版）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optionally get &lt;a href="https://www.graalvm.org/" target="_blank"&gt;GraalVM&lt;/a&gt; {{ site.data.versions.graalvm }} for native compilation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>可选择获取&lt;a href="https://www.graalvm.org/" target="_blank"&gt;GraalVM&lt;/a&gt; {{ site.data.version.graalvm }}进行原生编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.versions.maven }}&lt;/a&gt; or &lt;a href="https://gradle.org/" target="_blank"&gt;Gradle&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.version.maven }}&lt;/a&gt;或&lt;a href="https://gradle.org/" target="_blank"&gt;Gradle&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://code.quarkus.io"&gt;Start Coding&lt;/a&gt; with Quarkus {{ site.data.versions.quarkus.version }} [&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;announce&lt;/a&gt;|&lt;a href="https://github.com/quarkusio/quarkus/releases/tag/{{ site.data.versions.quarkus.version }}"&gt;changelog&lt;/a&gt;]</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运用Quarkus {{ site.data.versions.quarkus.version }} [&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;通告&lt;/a&gt;|&lt;a href="https://github.com/quarkusio/quarkus/releases/tag/{{ site.data.versions.quarkus.version }}"&gt;变更日志&lt;/a&gt;]&lt;a href="https://code.quarkus.io"&gt;开始写代码&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Supersonic Subatomic Java</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>超音速 亚原子 Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Kubernetes Native Java栈为OpenJDK HotSpot和GraalVM量身定制，从Java库和标准中精心打造。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now Available</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现已可用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.versions.maven }}&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.version.maven }}&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A virtual (and in person where possible) tour of Java User Groups creating a unique hands-on experience with access to Quarkus experts designed to help you get started with Java in a Kubernetes world.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个Java用户组的虚拟之旅(如果可能的话还可以亲自去)，创建一个独特的亲身体验，造访旨在帮助您在Kubernetes世界中开始使用Java的Quarkus专家。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies Imperative and Reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一指令式和响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.  &lt;a href="/vision/continuum"&gt;Learn more&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在开发应用程序时，将熟悉的命令式代码和响应式风格结合起来。&lt;a href="/vision/continuum"&gt;了解更多&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Best of Breed Libraries and Standards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>最好的类库和标准</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of hundreds of best-of-breed libraries that you love and use. All wired on a standard backbone. &lt;a href="/vision/standards"&gt;Learn more about Quarkus Extensions&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus提供了一个内聚的、使用起来有趣的全栈框架，它利用了您所喜爱和使用的数百个最佳组合库，都将其连接在一个标准主干上。&lt;a href="/vision/standards"&gt;了解更多关于Quarkus扩展的信息&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;1&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;1&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install via Command Line Interface</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过命令行界面安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open your favorite terminal and use JBang to install the Quarkus CLI. You do not need to have Java installed first.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>打开您喜欢的终端并使用JBang安装Quarkus CLI。您不需要首先安装Java。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Linux, macOS, and Windows (using WSL or bash compatible shell like Cygwin or MinGW)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于Linux、macOS和Windows（使用WSL或bash兼容的shell，如Cygwin或MinGW）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Windows using Powershell</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>面向Windows使用Powershell</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If it's your first time to install, you'll need ot restart your shell.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果第一次安装，需要重新启动您的shell。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or, you can also install the CLI with SDKMAN!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>或者，您也可以用SDKMAN安装CLI！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For more options, such as Homebrew or Chocolatey, see &lt;a href="/guides/cli-tooling"&gt;the Quarkus CLI guide&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>更多的选项，如Homebrew或Chocolatey，请参见&lt;a href="/guides/cli-tooling"&gt;Quarkus CLI指南&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;2&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;2&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the Getting Started Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建 "入门 "应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run this script in your CLI:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在你的CLI中运行这个脚本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;3&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;3&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the Getting Started Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行 "入门 "应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Boom! Your Quarkus app is now running at &lt;code&gt;localhost:8080&lt;/code&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>当当当！您的Quarkus应用已经在&lt;code&gt;localhost:8080&lt;/code&gt;运行了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;4&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;4&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding with Quarkus</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用Quarkus进行实时编码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus makes it easy to change your code on the fly. Let's modify the &lt;a href="localhost:8080/hello"&gt;RESTful endpoint&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus使您可以轻松地动态更改代码。让我们修改 &lt;a href="localhost:8080/hello"&gt;RESTful 端点&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open &lt;code&gt;src/main/java/GreetingsResource.java&lt;/code&gt; in a text editor or your &lt;a href="https://quarkus.io/guides/ide-tooling"&gt;favorite IDE&lt;/a&gt; and change "hello RESTEasy" to "hola RESTEasy". Then refresh the browser and see the changes.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>用文本编辑器或您惯用的 &lt;a href="https://quarkus.io/guides/ide-tooling"&gt;IDE&lt;/a&gt; 打开&lt;code&gt;src/main/java/GreetingsResource.java&lt;/code&gt; ，把 ”hello RESTEasy“ 改为 ”你好 RESTEasy“。然后刷新浏览器并查看更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cool stuff right? &lt;a href="https://quarkus.io/guides/maven-tooling#dev-mode"&gt;Learn more about Quarkus's dev mode&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>很Cool的东东对吧？&lt;a href="https://quarkus.io/guides/maven-tooling#dev-mode"&gt;了解更多Quarkus的开发模式&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;About &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;关于&lt;i class="fas fa-chevron-down"&gt; &lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;WHAT IS QUARKUS?&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;QUARKUS是什么？&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;CONTAINER FIRST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;容器优先 &lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;DEVELOPER JOY&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;开发者的乐趣 &lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Learn &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;学习 &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;GET STARTED&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;入门&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}"&gt;GUIDES&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}" &gt;指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;Community &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;社区 &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}"&gt;BLOG&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}" &gt;博客&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}"&gt;PODCAST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}" &gt;播客&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUPERSONIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>超音速&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUBATOMIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>亚原子&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;Read the release notes&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;阅读发布说明&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个优化开发者乐趣的有凝聚力的平台：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unified configuration</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Zero config, live reload in the blink of an eye</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>零配置，瞬间重新加载</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Streamlined code for the 80% common usages, flexible for the 20%</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>简化80%的常用代码，灵活处理剩余的20%</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>No hassle native executable generation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>轻松生成本机可执行文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/vision/developer-joy"&gt;Learn more&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/vision/developer-joy"&gt;了解更多&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot. &lt;a href="/vision/container-first"&gt;Learn more.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus为GraalVM和HotSpot定制您的应用程序。惊人的快速启动时间，令人难以置信的低RSS内存（不仅仅是堆大小！）提供近乎即时的扩展和在Kubernetes等容器编排平台中高密度内存利用率。我们使用一种称为编译时引导的技术。&lt;a href="/vision/container-first"&gt;了解更多信息。&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kube-Native</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Kube-Native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/container-first"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/container-first"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies imperative and reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一指令式和响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/continuum"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Community and Standards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>社区和标准</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/standards"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/standards"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/vision/developer-joy"&gt;了解更多&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Extensions &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;扩展&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/catalog" class="{% if page.url contains '/catalog/' %}active{% endif %}"&gt;EXTENSION CATALOG&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/catalog" class="{% if page.url contains '/catalog/' %}active{% endif %}"&gt;扩展目录&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/useextensions" class="{% if page.url contains '/useextensions/' %}active{% endif %}"&gt;USE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/useextensions" class="{% if page.url contains '/useextensions/' %}active{% endif %}"&gt;使用扩展&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/createextensions" class="{% if page.url contains '/createextensions/' %}active{% endif %}"&gt;CREATE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/createextensions" class="{% if page.url contains '/createextensions/' %}active{% endif %}"&gt;创建扩展&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Community &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;社区&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
  </body>
</tmx>
